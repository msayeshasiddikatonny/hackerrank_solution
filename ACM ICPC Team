import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the acmTeam function below.
    static int[] acmTeam(String[] topic) {
     int maxskillteam=0;
     int maxskill=0;
     for(int i=0;i<topic.length;i++){
         for(int j=i+1;j<topic.length;j++){
         String mem1=topic[i];
         String mem2=topic[j];
         int skill=0;
         for(int k=0;k<mem1.length();k++){
           if(mem1.charAt(k)=='1' || mem2.charAt(k)=='1' )
           skill++;
         }
         if(maxskill==skill)
         maxskillteam++;
         if(skill>maxskill){
             maxskill=skill;maxskillteam=1;
         }
         }
     }
    int [] a={maxskill,maxskillteam};
    return a;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nm = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nm[0]);

        int m = Integer.parseInt(nm[1]);

        String[] topic = new String[n];

        for (int i = 0; i < n; i++) {
            String topicItem = scanner.nextLine();
            topic[i] = topicItem;
        }

        int[] result = acmTeam(topic);

        for (int i = 0; i < result.length; i++) {
            bufferedWriter.write(String.valueOf(result[i]));

            if (i != result.length - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
