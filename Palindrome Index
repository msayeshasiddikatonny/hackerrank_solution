import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the palindromeIndex function below.
    static int palindromeIndex(String s) {

     for(int i=0,j=s.length()-1;i<j;i++,j--){
       if(s.codePointAt(i)==s.codePointAt(j)){

       }
       else if(s.codePointAt(i+1)==s.codePointAt(j) && s.codePointAt(i+2)==s.codePointAt(j-1)){
        return i;
       }
       else if(s.codePointAt(i)==s.codePointAt(j-1) && s.codePointAt(i+1)==s.codePointAt(j-2)){
       return j;
        
     }
     
    }
return -1;
    }
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String s = scanner.nextLine();

            int result = palindromeIndex(s);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
