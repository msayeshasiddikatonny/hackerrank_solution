import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the minimumNumber function below.
    static int minimumNumber(int n, String password) {
        // Return the minimum number of characters to make the password strong
    int t=4;int num=0,low=0,up=0,sp=0;
     
    for(int i=0;i<password.length();i++){
      int temp=password.codePointAt(i);
      if(temp>47 && temp<58)
        num=1;
      if(temp>64 && temp<91)
        up=1;
      if(temp>96 && temp<123)
        low=1;
     
      if((temp>34 && temp<39)|| (temp>39 && temp<44) || temp==33 || temp==45 || temp==64 || temp==94)  
        sp=1;
    }
    t= (t-(num+low+up+sp));
     return Math.max(t,6-password.length());
      
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String password = scanner.nextLine();

        int answer = minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
